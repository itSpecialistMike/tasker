// components/TaskForm.tsx
"use client";

import React, { useState, useEffect } from "react";
import { useTasks } from "@/hooks/useTasks";
import { useFetchDashboards } from "@/hooks/useFetchDashboards";
import { useUser } from "@/hooks/useUser";
import { useUsers } from "@/hooks/useUsers";
import { useCreateTask, CreateTaskPayload } from "@/hooks/useCreateTask";
import { TaskFormData} from "@/types/TaskFormData";

interface Props {
    onSuccess?: () => void;
}

const TaskForm: React.FC<Props> = ({ onSuccess }) => {
    const { tasks } = useTasks();
    const { data: dashboards = [] } = useFetchDashboards();
    const { user } = useUser();
    const { users } = useUsers();

    const { createTask, loading, success, error } = useCreateTask();

    const [form, setForm] = useState<TaskFormData>({
        title: "",
        description: "",
        deadline: "",
        reporterId: "",
        approverId: "",
        approveStatus: "approved", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: approved
        dashboardId: "",
        blockedBy: [],
    });

    const [hasBlockers, setHasBlockers] = useState(false);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π reporterId –∏ approverId
    useEffect(() => {
        if (user?.id) {
            setForm((prev) => ({
                ...prev,
                reporterId: String(user.id),
                approverId: String(user.id), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }));
        }
    }, [user]);

    const handleChange = (
        e: React.ChangeEvent<
            HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        >
    ) => {
        const { name, value } = e.target;
        setForm((prev) => ({ ...prev, [name]: value }));
    };

    const handleBlockedByChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const selected = Array.from(e.target.selectedOptions, (opt) => opt.value);

        // –ù–û–í–ê–Ø –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ (ID):", selected);

        setForm((prev) => ({ ...prev, blockedBy: selected }));
    };

    const handleBlockersToggle = (isYes: boolean) => {
        setHasBlockers(isYes);
        if (!isYes) {
            setForm((prev) => ({ ...prev, blockedBy: [] }));
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º payload –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        // –ú—ã —è–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        const payload: CreateTaskPayload = {
            title: form.title,
            description: form.description,
            deadline: form.deadline,
            dashboardID: form.dashboardId,
            reporterID: form.reporterId,
            approveStatus: form.approveStatus,
            approverID: form.approverId,
            // –ï—Å–ª–∏ hasBlockers === false, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            blockers: hasBlockers ? form.blockedBy : [],
        };

        // üöÄ –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º payload –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        console.log("Payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", payload);

        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ö—É–∫
        await createTask(payload);

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (success && onSuccess) {
            onSuccess();
        }
    };

    return (
        <form onSubmit={handleSubmit} className="p-6 w-full flex flex-col gap-6 bg-white">
            <div className="flex flex-col gap-2">
                <label htmlFor="title" className="text-2xl text-gray-700 font-bold">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</label>
                <input
                    id="title"
                    name="title"
                    value={form.title}
                    onChange={handleChange}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
            </div>

            <div className="flex flex-col gap-2">
                <label htmlFor="description" className="text-xl text-gray-700 font-bold">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                    id="description"
                    name="description"
                    value={form.description}
                    onChange={handleChange}
                    placeholder="–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-y min-h-[100px]"
                />
            </div>

            <section>
                <div className="flex gap-4 w-full">
                    <div className="flex flex-col gap-2 w-full">
                        <label htmlFor="deadline" className="text-xl text-gray-700 font-bold">–î–µ–¥–ª–∞–π–Ω</label>
                        <input
                            id="deadline"
                            name="deadline"
                            type="datetime-local"
                            value={form.deadline}
                            onChange={handleChange}
                            required
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 h-12"
                        />
                    </div>
                    <div className="flex flex-col gap-2 w-full">
                        <label htmlFor="dashboardId" className="text-xl text-gray-700 font-bold">–î–∞—à–±–æ—Ä–¥</label>
                        <select
                            id="dashboardId"
                            name="dashboardId"
                            value={form.dashboardId}
                            onChange={handleChange}
                            required
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 h-12"
                        >
                            <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥</option>
                            {dashboards
                                .filter((db) => db.id !== 'all')
                                .map((db) => (
                                    <option key={db.id} value={db.id}>{db.name}</option>
                                ))}
                        </select>
                    </div>

                </div>
            </section>

            <section className="flex gap-4 justify-between">
                {/* –°–µ–∫—Ü–∏—è –¥–ª—è "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ?" */}
                <div className="flex flex-col gap-2">
                    <label className="text-medium text-gray-700 font-medium">–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ?</label>
                    <div className="flex gap-4">
                        {/* –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "–î–∞" */}
                        <div className="flex items-center gap-2">
                            <input
                                id="require-yes"
                                name="requireApproval"
                                type="radio"
                                checked={form.approveStatus === "need-approval"}
                                onChange={() => setForm(prev => ({ ...prev, approveStatus: "need-approval" }))}
                                className="h-6 w-6 text-indigo-600 bg-gray-100 border-gray-300 focus:ring-indigo-500 cursor-pointer"
                            />
                            <label htmlFor="require-yes" className="text-medium text-gray-700 font-medium cursor-pointer">–î–∞</label>
                        </div>
                        {/* –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç" */}
                        <div className="flex items-center gap-2">
                            <input
                                id="require-no"
                                name="requireApproval"
                                type="radio"
                                checked={form.approveStatus === "approved"}
                                onChange={() => setForm(prev => ({ ...prev, approveStatus: "approved" }))}
                                className="h-6 w-6 text-indigo-600 bg-gray-100 border-gray-300 focus:ring-indigo-500 cursor-pointer"
                            />
                            <label htmlFor="require-no" className="text-medium text-gray-700 font-medium cursor-pointer">–ù–µ—Ç</label>
                        </div>
                    </div>
                </div>

                {/* –°–µ–∫—Ü–∏—è –¥–ª—è "–ï—Å—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏?" */}
                <div className="flex flex-col gap-2">
                    <label className="text-medium text-gray-700 font-medium">–ï—Å—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏?</label>
                    <div className="flex gap-4">
                        {/* –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "–î–∞" */}
                        <div className="flex items-center gap-2">
                            <input
                                id="blockers-yes"
                                name="hasBlockers"
                                type="radio"
                                checked={hasBlockers}
                                onChange={() => handleBlockersToggle(true)}
                                className="h-6 w-6 text-indigo-600 bg-gray-100 border-gray-300 focus:ring-indigo-500 cursor-pointer"
                            />
                            <label htmlFor="blockers-yes" className="text-medium text-gray-700 font-medium cursor-pointer">–î–∞</label>
                        </div>
                        {/* –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç" */}
                        <div className="flex items-center gap-2">
                            <input
                                id="blockers-no"
                                name="hasBlockers"
                                type="radio"
                                checked={!hasBlockers}
                                onChange={() => handleBlockersToggle(false)}
                                className="h-6 w-6 text-indigo-600 bg-gray-100 border-gray-300 focus:ring-indigo-500 cursor-pointer"
                            />
                            <label htmlFor="blockers-no" className="text-medium text-gray-700 font-medium cursor-pointer">–ù–µ—Ç</label>
                        </div>
                    </div>
                </div>
            </section>

            {form.approveStatus === "need-approval" && (
                <div className="flex flex-col gap-2">
                    <label htmlFor="approverId" className="text-xl text-gray-700 font-medium">–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π:</label>
                    <select
                        id="approverId"
                        name="approverId"
                        value={form.approverId}
                        onChange={handleChange}
                        required
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ</option>
                        {users.map((u) => (
                            <option key={u.id} value={u.id}>
                                {u.name} {u.surname} {u.middlename} {u.roleID}
                            </option>
                        ))}
                    </select>
                </div>
            )}

            {hasBlockers && (
                <div className="flex flex-col gap-2">
                    <label htmlFor="blockedBy" className="text-xl text-gray-700 font-medium">–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏</label>
                    <select
                        id="blockedBy"
                        name="blockedBy"
                        multiple
                        value={form.blockedBy}
                        onChange={handleBlockedByChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white h-40 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        {tasks.map((task) => (
                            <option key={task.id} value={task.id}>
                                {task.dashboardId} {task.title} {task.description}
                            </option>
                        ))}
                    </select>
                </div>
            )}

            <button
                type="submit"
                className="w-full mt-4 px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-gray-400"
                disabled={loading}
            >
                {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"}
            </button>

            {success && (
                <div className="mt-4 p-3 bg-green-100 text-green-700 rounded-lg">
                    –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
                </div>
            )}
            {error && (
                <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-lg">
                    –û—à–∏–±–∫–∞: {error}
                </div>
            )}
        </form>
    );
};

export default TaskForm;